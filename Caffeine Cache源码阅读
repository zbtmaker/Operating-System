# Caffeine Cache源码阅读

## TimeWheel
时间轮算法，用于大规模定时任务注册和执行。这里需要做的事情就是
我们可以看一下示例
```java
@Slf4j
public class HashedWheelTimerTest extends TestCase {
    private final CountDownLatch countDownLatch = new CountDownLatch(2);

    public void test1()  {
        HashedWheelTimer hashedWheelTimer = new HashedWheelTimer(1, TimeUnit.MINUTES, 16);
        log.info("create HashedWheelTimer ----------");
        hashedWheelTimer.newTimeout(timeout -> {
            log.info("--------task1 execute---------");
            countDownLatch.countDown();
        }, 1, TimeUnit.MINUTES);

        hashedWheelTimer.newTimeout(timeout -> {
            log.info("--------task2 execute---------");
            countDownLatch.countDown();
        }, 1, TimeUnit.MINUTES);

        try {
            countDownLatch.await();
        } catch (Exception ex) {
            log.error("CountDownLatch.await execute error!", ex);
        }
        hashedWheelTimer.stop();
    }
}
```

### 数据结构
Hash时间轮的数据结构是一个环形数组，有点像我们的钟表，我们在创建的时候指定环形数组的长度，假设环形数组的长度为60，而每秒指针都会跳动一下，那么跳动一圈需要的时间为60秒，也就是一分钟，我们分别给这几个
* tickDuration：指针跳动一下需要的时间，
* timeUnit：跳动一下的时间为单位，可以是TimeUnit.SECONDS、TimeUnit.MILLISECONDS等时间单位
* wheel：环形数组，长度可以指定，如果不指定的话，默认是长度512；
可以看一下HashedTimerWheel的构造函数

```java
public class HashedWheelTimer implements Timer {
    public HashedWheelTimer(
            ThreadFactory threadFactory,
            long tickDuration, TimeUnit unit, int ticksPerWheel, boolean leakDetection,
            long maxPendingTimeouts, Executor taskExecutor) {

        checkNotNull(threadFactory, "threadFactory");
        checkNotNull(unit, "unit");
        checkPositive(tickDuration, "tickDuration");
        checkPositive(ticksPerWheel, "ticksPerWheel");
        this.taskExecutor = checkNotNull(taskExecutor, "taskExecutor");

        // Normalize ticksPerWheel to power of two and initialize the wheel.
        wheel = createWheel(ticksPerWheel);
        mask = wheel.length - 1;

        // 将跳动一次的时间统一转换成TimeUnit.NANOSECONDS
        long duration = unit.toNanos(tickDuration);

        // Prevent overflow.
        if (duration >= Long.MAX_VALUE / wheel.length) {
            throw new IllegalArgumentException(String.format(
                    "tickDuration: %d (expected: 0 < tickDuration in nanos < %d",
                    tickDuration, Long.MAX_VALUE / wheel.length));
        }

        if (duration < MILLISECOND_NANOS) {
            logger.warn("Configured tickDuration {} smaller then {}, using 1ms.",
                        tickDuration, MILLISECOND_NANOS);
            this.tickDuration = MILLISECOND_NANOS;
        } else {
            this.tickDuration = duration;
        }
        // 线程池工厂累创建一个线程，这个线程会执行Worker这个Runnable类的run方法，时间轮的主要流程
        // 就在这个方法里面
        workerThread = threadFactory.newThread(worker);

        leak = leakDetection || !workerThread.isDaemon() ? leakDetector.track(this) : null;

        this.maxPendingTimeouts = maxPendingTimeouts;

        if (INSTANCE_COUNTER.incrementAndGet() > INSTANCE_COUNT_LIMIT &&
            WARNED_TOO_MANY_INSTANCES.compareAndSet(false, true)) {
            reportTooManyInstances();
        }
    }
}
```
创建一个Timeout定时任务时，并不会直接将Timeout直接添加到时间轮中，而是先放到一个Queue当中，具体的代码我们可以看下面的代码。
```java
public class HashedWheelTimer implements Timer {
    private final Queue<HashedWheelTimeout> timeouts = PlatformDependent.newMpscQueue();
    @Override
    public Timeout newTimeout(TimerTask task, long delay, TimeUnit unit) {
        checkNotNull(task, "task");
        checkNotNull(unit, "unit");

        long pendingTimeoutsCount = pendingTimeouts.incrementAndGet();

        if (maxPendingTimeouts > 0 && pendingTimeoutsCount > maxPendingTimeouts) {
            pendingTimeouts.decrementAndGet();
            throw new RejectedExecutionException("Number of pending timeouts ("
                + pendingTimeoutsCount + ") is greater than or equal to maximum allowed pending "
                + "timeouts (" + maxPendingTimeouts + ")");
        }
        // 每一次创建Timer的时候都会调用start方法去启动时间轮执行
        start();

        long deadline = System.nanoTime() + unit.toNanos(delay) - startTime;

        if (delay > 0 && deadline < 0) {
            deadline = Long.MAX_VALUE;
        }
        // 创建一个timeout定时任务，同时将这个定时任务添加到timeouts中，没有直接将timeout直接添加到wheel中
        HashedWheelTimeout timeout = new HashedWheelTimeout(this, task, deadline);
        timeouts.add(timeout);
        return timeout;
    }
}
```
当时间轮需要执行定时任务时，会先将timeouts这个队列中的定时任务放入到对应的bucket里面，同时将已经取消了的Timeout定时任务放入到取消队列中，具体的我们可以看到下面的定时任务
```java
public class HashedWheelTimer implements Timer {
    // 在HashedWheelTimer创建的时候就会将Worker交给一个Thread去执行。
    private final class Worker implements Runnable {
        private final Set<Timeout> unprocessedTimeouts = new HashSet<Timeout>();

        private long tick;

        @Override
        public void run() {
            // Initialize the startTime.
            startTime = System.nanoTime();
            if (startTime == 0) {
                // We use 0 as an indicator for the uninitialized value here, so make sure it's not 0 when initialized.
                startTime = 1;
            }

            // Notify the other threads waiting for the initialization at start().
            startTimeInitialized.countDown();

            do {
                // 这里首先需要判断跳到下一个bucket需要等待的时间，这里需要详细去执行
                final long deadline = waitForNextTick();
                if (deadline > 0) {
                    int idx = (int) (tick & mask);
                    // 先处理已经被取消的定时任务
                    processCancelledTasks();
                    // 获取当前待执行的bucket
                    HashedWheelBucket bucket =
                            wheel[idx];
                    // 将timeouts中前10000个定时任务放入到对应的bucket当中
                    transferTimeoutsToBuckets();
                    // 依次去执行对应的timeout
                    bucket.expireTimeouts(deadline);
                    tick++;
                }
            } while (WORKER_STATE_UPDATER.get(HashedWheelTimer.this) == WORKER_STATE_STARTED);

            // Fill the unprocessedTimeouts so we can return them from stop() method.
            for (HashedWheelBucket bucket: wheel) {
                bucket.clearTimeouts(unprocessedTimeouts);
            }
            // 如果定时任务已经结束了，那么需要执行定时任务
            for (;;) {
                HashedWheelTimeout timeout = timeouts.poll();
                if (timeout == null) {
                    break;
                }
                if (!timeout.isCancelled()) {
                    unprocessedTimeouts.add(timeout);
                }
            }
            // 处理对应的定时任务
            processCancelledTasks();
        }

        private void transferTimeoutsToBuckets() {
            for (int i = 0; i < 100000; i++) {
                HashedWheelTimeout timeout = timeouts.poll();
                if (timeout == null) {
                    // all processed
                    break;
                }
                if (timeout.state() == HashedWheelTimeout.ST_CANCELLED) {
                    // Was cancelled in the meantime.
                    continue;
                }

                long calculated = timeout.deadline / tickDuration;
                timeout.remainingRounds = (calculated - tick) / wheel.length;

                final long ticks = Math.max(calculated, tick); // Ensure we don't schedule for past.
                int stopIndex = (int) (ticks & mask);

                HashedWheelBucket bucket = wheel[stopIndex];
                bucket.addTimeout(timeout);
            }
        }

        private void processCancelledTasks() {
            for (;;) {
                HashedWheelTimeout timeout = cancelledTimeouts.poll();
                if (timeout == null) {
                    // all processed
                    break;
                }
                try {
                    timeout.remove();
                } catch (Throwable t) {
                    if (logger.isWarnEnabled()) {
                        logger.warn("An exception was thrown while process a cancellation task", t);
                    }
                }
            }
        }

        /**
         * calculate goal nanoTime from startTime and current tick number,
         * then wait until that goal has been reached.
         * @return Long.MIN_VALUE if received a shutdown request,
         * current time otherwise (with Long.MIN_VALUE changed by +1)
         */
        private long waitForNextTick() {
            long deadline = tickDuration * (tick + 1);

            for (;;) {
                final long currentTime = System.nanoTime() - startTime;
                long sleepTimeMs = (deadline - currentTime + 999999) / 1000000;

                if (sleepTimeMs <= 0) {
                    if (currentTime == Long.MIN_VALUE) {
                        return -Long.MAX_VALUE;
                    } else {
                        return currentTime;
                    }
                }

                if (PlatformDependent.isWindows()) {
                    sleepTimeMs = sleepTimeMs / 10 * 10;
                    if (sleepTimeMs == 0) {
                        sleepTimeMs = 1;
                    }
                }

                try {
                    Thread.sleep(sleepTimeMs);
                } catch (InterruptedException ignored) {
                    if (WORKER_STATE_UPDATER.get(HashedWheelTimer.this) == WORKER_STATE_SHUTDOWN) {
                        return Long.MIN_VALUE;
                    }
                }
            }
        }
    }
}
```
每一个定时任务都与时间轮的启动时间做比较，如果目前时间轮的时间，如果一个tick中的人物能够快速执行完成，那么就需要等待一定的时间来判断是否走下一个定时任务，如果上一个定时任务执行的时间超过了一个tick的时间，那么到下一个tick的时候可以直接执行。



## 参考文档
[Caffeine高性能设计剖析](https://albenw.github.io/posts/a4ae1aa2/)

[HashedWheelTimer时间轮原理分析](https://albenw.github.io/posts/ec8df8c/)